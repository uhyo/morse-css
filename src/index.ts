/**
 * Morse CSS - A powerful classless CSS framework with Morse code patterns
 *
 * This is the main entry point for the Morse CSS framework.
 * It exports the function to convert pseudo-CSS with :morse() selectors
 * to standard CSS with :has() selectors that match Morse code patterns.
 */

import { MorseCodeMap } from "./types";

/**
 * Morse code mapping for letters and numbers
 */
export const MORSE_CODE: MorseCodeMap = {
  // Letters
  A: [".", "-"],
  B: ["-", ".", ".", "."],
  C: ["-", ".", "-", "."],
  D: ["-", ".", "."],
  E: ["."],
  F: [".", ".", "-", "."],
  G: ["-", "-", "."],
  H: [".", ".", ".", "."],
  I: [".", "."],
  J: [".", "-", "-", "-"],
  K: ["-", ".", "-"],
  L: [".", "-", ".", "."],
  M: ["-", "-"],
  N: ["-", "."],
  O: ["-", "-", "-"],
  P: [".", "-", "-", "."],
  Q: ["-", "-", ".", "-"],
  R: [".", "-", "."],
  S: [".", ".", "."],
  T: ["-"],
  U: [".", ".", "-"],
  V: [".", ".", ".", "-"],
  W: [".", "-", "-"],
  X: ["-", ".", ".", "-"],
  Y: ["-", ".", "-", "-"],
  Z: ["-", "-", ".", "."],

  // Numbers
  "0": ["-", "-", "-", "-", "-"],
  "1": [".", "-", "-", "-", "-"],
  "2": [".", ".", "-", "-", "-"],
  "3": [".", ".", ".", "-", "-"],
  "4": [".", ".", ".", ".", "-"],
  "5": [".", ".", ".", ".", "."],
  "6": ["-", ".", ".", ".", "."],
  "7": ["-", "-", ".", ".", "."],
  "8": ["-", "-", "-", ".", "."],
  "9": ["-", "-", "-", "-", "."],
};

/**
 * Regular expression to match :morse() selectors
 * Captures:
 * 1. Everything before :morse()
 * 2. The Morse word inside the parentheses
 * 3. Everything after the closing parenthesis
 */
const MORSE_SELECTOR_REGEX = /([^{]*):morse\(([A-Z0-9]+)\)([^{]*{[^}]*})/g;

/**
 * Converts a Morse character to its corresponding HTML pattern selector
 *
 * @param char - The Morse character (dot or dash)
 * @returns The HTML pattern selector for the Morse character
 */
function getMorseSelectorForChar(char: string): string {
  if (char === ".") {
    // Dot: <span></span>
    return "span:empty";
  } else if (char === "-") {
    // Dash: <span><span><span></span></span></span>
    return "span:has(span:has(span:empty))";
  } else {
    throw new Error(`Unknown Morse character: ${char}`);
  }
}

/**
 * Converts a Morse word to its corresponding HTML pattern selector
 *
 * @param morseWord - The Morse word to convert
 * @returns The HTML pattern selector for the Morse word
 */
function getMorseSelectorForWord(morseWord: string): string {
  // Convert the word to an array of characters
  const characters = morseWord.split("");

  // Build the selector parts for each character
  const selectorParts: string[] = [];

  for (const char of characters) {
    const sequence = MORSE_CODE[char];
    if (!sequence) {
      throw new Error(`Unknown character in Morse word: ${char}`);
    }

    // Convert each Morse character to its selector
    for (const morseChar of sequence) {
      selectorParts.push(getMorseSelectorForChar(morseChar));
    }

    // Add a space between characters (represented by incrementing the child index)
    // This is handled by the adjacent sibling combinator (+)
  }

  // Join the selector parts with the adjacent sibling combinator
  return selectorParts.join(" + ");
}

/**
 * Converts pseudo-CSS with :morse() selectors to standard CSS with :has() selectors
 *
 * @param pseudoCSS - The pseudo-CSS content with :morse() selectors
 * @returns The generated CSS with :has() selectors
 */
export function convertMorseCSS(pseudoCSS: string): string {
  // Add a header comment
  let css = "/* Generated by Morse CSS */\n";
  css += "/* https://github.com/morse-css */\n";
  css += "\n";

  // Replace all :morse() selectors with :has() selectors
  const convertedCSS = pseudoCSS.replace(
    MORSE_SELECTOR_REGEX,
    (match, before, morseWord, after) => {
      try {
        // Get the HTML pattern selector for the Morse word
        const morseSelector = getMorseSelectorForWord(morseWord);

        // Replace the :morse() selector with :has() selector
        return `${before}:has(${morseSelector})${after}`;
      } catch (error) {
        console.error(`Error converting Morse word "${morseWord}": ${(error as Error).message}`);
        // Return the original match if there's an error
        return match;
      }
    }
  );

  // Add the converted CSS to the output
  css += convertedCSS;

  return css;
}

// Export types
export * from "./types";
