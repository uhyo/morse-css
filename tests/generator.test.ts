import { describe, it, expect } from "vitest";
import { generateCSS } from "../src/generator";
import { TranslatedMorseRule } from "../src/types";

describe("generateCSS", () => {
  it("should generate CSS from a single translated rule", () => {
    const translatedRules: TranslatedMorseRule[] = [
      {
        originalSelector: "*",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        properties: {
          "font-weight": "bold",
        },
      },
    ];

    const result = generateCSS(translatedRules);

    // Check that the result is a string
    expect(typeof result).toBe("string");

    // Check that the result contains the translated selector
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)))");

    // Check that the result contains the properties
    expect(result).toContain("font-weight: bold;");

    // Check that the result contains the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
  });

  it("should generate CSS from multiple translated rules", () => {
    const translatedRules: TranslatedMorseRule[] = [
      {
        originalSelector: "*",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        properties: {
          "font-weight": "bold",
        },
      },
      {
        originalSelector: "*",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)) + span:empty)",
        properties: {
          color: "red",
        },
      },
    ];

    const result = generateCSS(translatedRules);

    // Check that the result contains both translated selectors
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)))");
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)) + span:empty)");

    // Check that the result contains both properties
    expect(result).toContain("font-weight: bold;");
    expect(result).toContain("color: red;");
  });

  it("should generate CSS with multiple properties for a single rule", () => {
    const translatedRules: TranslatedMorseRule[] = [
      {
        originalSelector: "*",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        properties: {
          "background-color": "blue",
          color: "white",
        },
      },
    ];

    const result = generateCSS(translatedRules);

    // Check that the result contains both properties
    expect(result).toContain("background-color: blue;");
    expect(result).toContain("color: white;");
  });

  it("should generate CSS with proper indentation", () => {
    const translatedRules: TranslatedMorseRule[] = [
      {
        originalSelector: "*",
        translatedSelector: "*:has(span:empty)",
        properties: {
          "font-weight": "bold",
        },
      },
    ];

    const result = generateCSS(translatedRules);

    // Check that the properties are indented
    expect(result).toContain("  font-weight: bold;");
  });

  it("should generate an empty string for an empty array of rules", () => {
    const translatedRules: TranslatedMorseRule[] = [];

    const result = generateCSS(translatedRules);

    // Check that the result contains only the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
    expect(result.trim().split("\n").length).toBe(2); // Header comment (2 lines)
  });
});
