import { describe, it, expect } from "vitest";
import { generateCSS } from "../src/generator";
import { TranslatedMorsePattern } from "../src/types";

describe("generateCSS", () => {
  it("should generate CSS from a single translated pattern", () => {
    const translatedPatterns: TranslatedMorsePattern[] = [
      {
        fullMatch: "*:morse(BOLD) { font-weight: bold; }",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        cssBlock: "font-weight: bold;",
      },
    ];

    const result = generateCSS(translatedPatterns);

    // Check that the result is a string
    expect(typeof result).toBe("string");

    // Check that the result contains the translated selector
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)))");

    // Check that the result contains the properties
    expect(result).toContain("font-weight: bold;");

    // Check that the result contains the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
  });

  it("should generate CSS from multiple translated patterns", () => {
    const translatedPatterns: TranslatedMorsePattern[] = [
      {
        fullMatch: "*:morse(BOLD) { font-weight: bold; }",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        cssBlock: "font-weight: bold;",
      },
      {
        fullMatch: "*:morse(RED) { color: red; }",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)) + span:empty)",
        cssBlock: "color: red;",
      },
    ];

    const result = generateCSS(translatedPatterns);

    // Check that the result contains both translated selectors
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)))");
    expect(result).toContain("*:has(span:empty + span:has(span:has(span:empty)) + span:empty)");

    // Check that the result contains both properties
    expect(result).toContain("font-weight: bold;");
    expect(result).toContain("color: red;");
  });

  it("should generate CSS with multiple properties for a single pattern", () => {
    const translatedPatterns: TranslatedMorsePattern[] = [
      {
        fullMatch: "*:morse(BLUE) { background-color: blue; color: white; }",
        translatedSelector: "*:has(span:empty + span:has(span:has(span:empty)))",
        cssBlock: "background-color: blue;\ncolor: white;",
      },
    ];

    const result = generateCSS(translatedPatterns);

    // Check that the result contains both properties
    expect(result).toContain("background-color: blue;");
    expect(result).toContain("color: white;");
  });

  it("should preserve the CSS block formatting", () => {
    const translatedPatterns: TranslatedMorsePattern[] = [
      {
        fullMatch: "*:morse(BOLD) { font-weight: bold; }",
        translatedSelector: "*:has(span:empty)",
        cssBlock: "font-weight: bold;",
      },
    ];

    const result = generateCSS(translatedPatterns);

    // Check that the CSS block is preserved
    expect(result).toContain("font-weight: bold;");
  });

  it("should generate an empty string for an empty array of patterns", () => {
    const translatedPatterns: TranslatedMorsePattern[] = [];

    const result = generateCSS(translatedPatterns);

    // Check that the result contains only the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
    expect(result.trim().split("\n").length).toBe(2); // Header comment (2 lines)
  });
});
