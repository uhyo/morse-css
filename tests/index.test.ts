import { describe, it, expect } from "vitest";
import { convertMorseCSS } from "../src/index";

describe("convertMorseCSS", () => {
  it("should convert pseudo-CSS to standard CSS", () => {
    const pseudoCSS = `
      *:morse(BOLD) {
        font-weight: bold;
      }
    `;

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result is a string
    expect(typeof result).toBe("string");

    // Check that the result contains the header comment
    expect(result).toContain("/* Generated by Morse CSS */");

    // Check that the result contains :has() selector
    expect(result).toContain(":has(");

    // Check that the result contains span selectors
    expect(result).toContain("span");

    // Check that the result contains the properties
    expect(result).toContain("font-weight: bold;");
  });

  it("should convert multiple pseudo-CSS rules", () => {
    const pseudoCSS = `
      *:morse(BOLD) {
        font-weight: bold;
      }
      
      *:morse(RED) {
        color: red;
      }
    `;

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result contains both properties
    expect(result).toContain("font-weight: bold;");
    expect(result).toContain("color: red;");
  });

  it("should handle complex selectors", () => {
    const pseudoCSS = `
      div > p:morse(BOLD) {
        font-weight: bold;
      }
    `;

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result contains the complex selector
    expect(result).toContain("div > p:has(");
  });

  it("should handle multiple properties", () => {
    const pseudoCSS = `
      *:morse(BLUE) {
        background-color: blue;
        color: white;
      }
    `;

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result contains both properties
    expect(result).toContain("background-color: blue;");
    expect(result).toContain("color: white;");
  });

  it("should return only the header comment for empty input", () => {
    const pseudoCSS = "";

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result contains only the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
    expect(result.trim().split("\n").length).toBe(2); // Header comment (2 lines)
  });

  it("should handle input without :morse() selectors", () => {
    const pseudoCSS = `
      * {
        font-weight: bold;
      }
    `;

    const result = convertMorseCSS(pseudoCSS);

    // Check that the result contains only the header comment
    expect(result).toContain("/* Generated by Morse CSS */");
    expect(result.trim().split("\n").length).toBe(2); // Header comment (2 lines)
  });
});
